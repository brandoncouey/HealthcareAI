generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(uuid())
  email          String        @unique
  name           String
  phone          String?       @unique
  password       String
  sessions       Session[]
  userOrganizations UserOrganization[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenHash String   @unique
  expiresAt DateTime
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
}

model UserOrganization {
  id             String        @id @default(uuid())
  userId         String
  organizationId String
  role           String        @default("member") // admin, member, viewer
  isActive       Boolean       @default(true)
  joinedAt       DateTime      @default(now())
  
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

model Organization {
  id       String    @id @default(uuid())
  name     String    @unique
  type     String    @default("healthcare") // hospital, clinic, nursing home, etc.
  address  String?
  city     String?
  state    String?
  zipCode  String?
  phone    String?
  website  String?
  
  userOrganizations UserOrganization[]
  patients Patient[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Patient {
  id            String       @id @default(uuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  firstName     String
  lastName      String
  dob           DateTime?
  
  // Physical characteristics
  sex           String?      // M, F, or other
  height        String?      // e.g., "5'6""
  weight        String?      // e.g., "153 lb"
  age           Int?         // Calculated from DOB
  
  // Basic contact
  phone         String?
  email         String?
  emergencyContact String?
  emergencyPhone   String?

  // Address
  addressLine1 String?
  addressLine2 String?
  city         String?
  state        String?
  postalCode   String?
  country      String?       @default("USA")

  // Medical info
  primaryInsurance String?
  insuranceId      String?
  medicalRecordNumber String? @unique
  
  // Status
  status        String?      @default("active") // active, inactive, discharged
  
  contacts  EmergencyContact[]
  referrals Referral[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  
  @@index([organizationId])
  @@index([lastName, firstName])
  @@index([status])
}

model EmergencyContact {
  id        String  @id @default(uuid())
  patientId String
  name      String
  phone     String?
  relation  String? // Spouse, Daughter, etc.

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId])
}

model Referral {
  id        String  @id @default(uuid())
  patientId String
  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  // Home support snapshot
  livesWith  String? // e.g., "Spouse"
  ecName     String? // Emergency Contact Name
  ecPhone    String?
  ecRelation String? // e.g., "Spouse"

  // Financial snapshot (store what you show; detailed coverage below)
  ntaScore            String? // shown as "NTA Score"
  hmoPlanType         String?
  medicareHmoProvider String? // e.g., HUMANA INSURANCE COMPANY

  // Primary diagnosis (code + display)
  primaryDxCode String?
  primaryDxText String?

  // Audit
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations (many-to-many via join tables)
  coverages   ReferralCoverage[]
  services    ReferralService[]
  diagnoses   ReferralDiagnosis[]
  medications ReferralMedication[]
  disciplines ReferralDiscipline[]
}

model Service {
  id       String  @id @default(uuid())
  name     String
  category String  // e.g., "Home Health", "Durable Medical Equipment"
  description String?
  
  referrals ReferralService[]
}

model ReferralService {
  id         String  @id @default(uuid())
  referralId String
  serviceId  String
  status     String  @default("pending") // pending, approved, denied, completed
  
  referral Referral @relation(fields: [referralId], references: [id], onDelete: Cascade)
  service  Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  @@index([referralId])
  @@index([serviceId])
}

model Diagnosis {
  id       String  @id @default(uuid())
  code     String  @unique // ICD-10 code
  display  String  // Human-readable description
  category String? // e.g., "Cardiovascular", "Respiratory"
  
  referrals ReferralDiagnosis[]
}

model ReferralDiagnosis {
  id          String    @id @default(uuid())
  referralId  String
  diagnosisId String
  isPrimary   Boolean   @default(false)
  notes       String?
  
  referral  Referral  @relation(fields: [referralId], references: [id], onDelete: Cascade)
  diagnosis Diagnosis @relation(fields: [diagnosisId], references: [id], onDelete: Cascade)
  
  @@index([referralId])
  @@index([diagnosisId])
}

model Medication {
  id       String  @id @default(uuid())
  name     String
  genericName String?
  category String? // e.g., "Antibiotic", "Pain Management"
  
  referrals ReferralMedication[]
}

model ReferralMedication {
  id           String    @id @default(uuid())
  referralId   String
  medicationId String
  dosage       String?
  frequency    String?
  duration     String?
  notes        String?
  
  referral   Referral   @relation(fields: [referralId], references: [id], onDelete: Cascade)
  medication Medication @relation(fields: [medicationId], references: [id], onDelete: Cascade)
  
  @@index([referralId])
  @@index([medicationId])
}

model Discipline {
  id       String  @id @default(uuid())
  name     String  @unique // e.g., "Physical Therapy", "Occupational Therapy"
  description String?
  
  referrals ReferralDiscipline[]
}

model ReferralDiscipline {
  id           String    @id @default(uuid())
  referralId   String
  disciplineId String
  status       String    @default("pending") // pending, approved, denied, completed
  notes        String?
  
  referral   Referral   @relation(fields: [referralId], references: [id], onDelete: Cascade)
  discipline Discipline @relation(fields: [disciplineId], references: [id], onDelete: Cascade)
  
  @@index([referralId])
  @@index([disciplineId])
}

model Payer {
  id       String  @id @default(uuid())
  name     String  @unique
  type     String  // e.g., "Medicare", "Medicaid", "Commercial"
  
  referrals ReferralCoverage[]
}

model ReferralCoverage {
  id       String  @id @default(uuid())
  referralId String
  payerId   String
  policyNumber String?
  groupNumber  String?
  status       String  @default("pending") // pending, approved, denied
  
  referral Referral @relation(fields: [referralId], references: [id], onDelete: Cascade)
  payer   Payer   @relation(fields: [payerId], references: [id], onDelete: Cascade)
  
  @@index([referralId])
  @@index([payerId])
}
