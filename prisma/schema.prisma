generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String                   @id @default(uuid())
  email             String                   @unique
  name              String
  phone             String?                  @unique
  password          String
  role              UserRole                 @default(MEMBER)
  settings          Json?
  sessions          Session[]
  userOrganizations UserOrganization[]
  sentInvitations   OrganizationInvitation[] @relation("InvitedByUser")
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
}

enum UserRole {
  SUPERADMIN
  ADMIN
  MEMBER
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenHash String   @unique
  expiresAt DateTime
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
}

model UserOrganization {
  id             String           @id @default(uuid())
  userId         String
  organizationId String
  role           OrganizationRole @default(MEMBER)
  isActive       Boolean          @default(true)
  joinedAt       DateTime         @default(now())
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

enum OrganizationRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

model Organization {
  id      String  @id @default(uuid())
  name    String  @unique
  type    String  @default("healthcare")
  address String?
  city    String?
  state   String?
  zipCode String?
  phone   String?
  website String?

  userOrganizations UserOrganization[]
  invitations       OrganizationInvitation[]
  patients          Patient[]
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
}

model OrganizationInvitation {
  id             String           @id @default(uuid())
  organizationId String
  email          String
  role           OrganizationRole @default(MEMBER)
  status         InvitationStatus @default(PENDING)
  invitedBy      String
  expiresAt      DateTime         @default(dbgenerated("(NOW() + INTERVAL '7 days')"))
  acceptedAt     DateTime?
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invitedByUser  User             @relation("InvitedByUser", fields: [invitedBy], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@unique([organizationId, email])
  @@index([organizationId])
  @@index([email])
  @@index([status])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REVOKED
}

model Patient {
  id                  String             @id @default(uuid())
  organizationId      String
  organization        Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  firstName           String
  lastName            String
  dob                 DateTime?
  sex                 String?
  height              String?
  weight              String?
  age                 Int?
  phone               String?
  email               String?
  emergencyContact    String?
  emergencyPhone      String?
  addressLine1        String?
  addressLine2        String?
  city                String?
  state               String?
  postalCode          String?
  country             String?            @default("USA")
  primaryInsurance    String?
  insuranceId         String?
  medicalRecordNumber String?            @unique
  status              String?            @default("active")
  contacts            EmergencyContact[]
  referrals           Referral[]
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  @@index([organizationId])
  @@index([lastName, firstName])
  @@index([status])
}

model EmergencyContact {
  id        String  @id @default(uuid())
  patientId String
  name      String
  phone     String?
  relation  String?
  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([patientId])
}

model Referral {
  id        String  @id @default(uuid())
  patientId String
  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  livesWith  String?
  ecName     String?
  ecPhone    String?
  ecRelation String?

  ntaScore            String?
  hmoPlanType         String?
  medicareHmoProvider String?

  primaryDxCode String?
  primaryDxText String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  coverages   ReferralCoverage[]
  services    ReferralService[]
  diagnoses   ReferralDiagnosis[]
  medications ReferralMedication[]
  disciplines ReferralDiscipline[]
}

model Service {
  id          String            @id @default(uuid())
  name        String
  category    String
  description String?
  referrals   ReferralService[]
}

model ReferralService {
  id         String   @id @default(uuid())
  referralId String
  serviceId  String
  status     String   @default("pending")
  referral   Referral @relation(fields: [referralId], references: [id], onDelete: Cascade)
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([referralId])
  @@index([serviceId])
}

model Diagnosis {
  id        String              @id @default(uuid())
  code      String              @unique
  display   String
  category  String?
  referrals ReferralDiagnosis[]
}

model ReferralDiagnosis {
  id          String    @id @default(uuid())
  referralId  String
  diagnosisId String
  isPrimary   Boolean   @default(false)
  notes       String?
  referral    Referral  @relation(fields: [referralId], references: [id], onDelete: Cascade)
  diagnosis   Diagnosis @relation(fields: [diagnosisId], references: [id], onDelete: Cascade)

  @@index([referralId])
  @@index([diagnosisId])
}

model Medication {
  id          String               @id @default(uuid())
  name        String
  genericName String?
  category    String?
  referrals   ReferralMedication[]
}

model ReferralMedication {
  id           String     @id @default(uuid())
  referralId   String
  medicationId String
  dosage       String?
  frequency    String?
  duration     String?
  notes        String?
  referral     Referral   @relation(fields: [referralId], references: [id], onDelete: Cascade)
  medication   Medication @relation(fields: [medicationId], references: [id], onDelete: Cascade)

  @@index([referralId])
  @@index([medicationId])
}

model Discipline {
  id          String               @id @default(uuid())
  name        String               @unique
  description String?
  referrals   ReferralDiscipline[]
}

model ReferralDiscipline {
  id           String     @id @default(uuid())
  referralId   String
  disciplineId String
  status       String     @default("pending")
  notes        String?
  referral     Referral   @relation(fields: [referralId], references: [id], onDelete: Cascade)
  discipline   Discipline @relation(fields: [disciplineId], references: [id], onDelete: Cascade)

  @@index([referralId])
  @@index([disciplineId])
}

model Payer {
  id        String             @id @default(uuid())
  name      String             @unique
  type      String
  referrals ReferralCoverage[]
}

model ReferralCoverage {
  id           String   @id @default(uuid())
  referralId   String
  payerId      String
  policyNumber String?
  groupNumber  String?
  status       String   @default("pending")
  referral     Referral @relation(fields: [referralId], references: [id], onDelete: Cascade)
  payer        Payer    @relation(fields: [payerId], references: [id], onDelete: Cascade)

  @@index([referralId])
  @@index([payerId])
}
